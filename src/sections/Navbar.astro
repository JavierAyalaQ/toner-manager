---
import Menu from "@/assets/svg/Menu.svg";
// get current page
const { pathname } = Astro.url
const normalizedPathName =
	pathname.length > 1 && pathname.endsWith("/") ? pathname.slice(0, -1) : pathname

const pages = [
	{ 
    name: "Inicio",
    href: "/",
    target: "_self" 
  },
	{ 
    name: "Gestionar",
    href: "/manage",
    target: "_self",
    active: normalizedPathName.startsWith("/manage") 
  },
	{ 
    name: "Historial",
    href: "/logs",
    target: "_self" 
  },
].map((page) => ({
	...page,
	active: page.active ?? normalizedPathName === page.href,
}))
---


<header class="backdrop-blur-sm fixed top-0 left-0 z-50 w-full bg-gradient-to-b from-teal-950 via-teal-950/30 to-teal-950/0">
  {/* Navbar */}
  <div class="max-w-7xl mx-auto flex flex-col md:flex-row items-center justify-between w-full h-full px-8 md:px-16 py-4">
    {/* Pages */}
    <div class="flex items-center justify-between w-full md:w-auto">
        <a href="/api/logout" class="flex items-center gap-2 cursor-pointer">
          Salir
        </a>
      <button id="menu-button" class="md:hidden flex items-center justify-center w-10 h-10 rounded-full bg-teal-950/30 hover:bg-teal-950/50 transition-colors">
        <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M4 6h16M4 12h16m-7 6h7" />
        </svg>
      </button>
    </div>
    <nav id="navbar-menu" class="closed flex flex-col gap-1 md:flex-row items-center justify-end w-full md:w-auto md:h-full md:gap-8 overflow-hidden">
      {
        pages.map(({ name, href, active, target }, key) => (
            <a href={href} target={target} rel={target === "_blank" ? "noopener noreferrer" : undefined}
              class:list={[
                "select-none flex items-center justify-center gap-1 md:gap-8 text-base font-bold hover:text-teal-400 transition-colors",
                { "text-teal-400": active },
                { "text-white": !active },
              ]}
              id={`nav-link-${key}`}
              data-astro-prefetch=""
            >
              <span class="z-10">{name}</span>
            </a>
        ))
      }
    </nav>
  </div>

  {/* Gradient line */}
  <div class="relative flex items-center justify-center w-full h-[1.5px] nav-gradient blur-none">
    <div class="w-full inline-flex h-[12px] bg-teal-200/50 blur-2xl bg-blend-screen">
    </div>
  </div>
</header>

<style>
  :root {
    --teal-white: rgb(240 253 250);
  }
  .nav-gradient {
    background: linear-gradient(to right, transparent 0%, var(--teal-white) 35%, var(--teal-white) 65%, transparent 100%);
  }
  #navbar-menu.closed {
    opacity: 0;
    pointer-events: none;
    height: 0;
    transition: opacity 0.3s ease-in-out, height 0.5s ease-in-out;
    interpolate-size: allow-keywords;
  }
  #navbar-menu.open {
    opacity: 1;
    pointer-events: all;
    height: auto;
    transition: opacity 0.3s ease-in-out, height 0.5s ease-in-out;
    interpolate-size: allow-keywords;
  }
</style>

{/* Hamburger Menu */}
<script>
  document.addEventListener("astro:page-load", () => {
    const navbarMenuButton = document.getElementById('menu-button');
    const navbarMenu = document.getElementById("navbar-menu");
    const CLICK_DELAY = 750;
    let isMenuOpen = false;


    {/* Check inner width */}
    function checkInnerWidth() {
      if (window.innerWidth < 768) {
        if (isMenuOpen == true && navbarMenu?.classList.contains("open")) {
          navbarMenu?.classList.add("closed");
          navbarMenu?.classList.remove("open");
          isMenuOpen = false;
        } else {
          return;
        }
      } else {
        navbarMenu?.classList.remove("closed");
        navbarMenu?.classList.remove("open");
        navbarMenu?.classList.add("md:opacity-100");
        navbarMenu?.classList.add("md:h-full");
        navbarMenu?.classList.add("md:pointer-events-auto");
        isMenuOpen = false;
      }
    }
    checkInnerWidth();
    window.addEventListener("resize", checkInnerWidth);
    window.addEventListener("scroll", checkInnerWidth);

    {/* Handle menu open */}
    if (navbarMenuButton && navbarMenu) {
      navbarMenuButton.addEventListener("click", () => {
        setTimeout(() => {
          if (isMenuOpen === false) {
            navbarMenu.classList.remove("closed");
            navbarMenu.classList.add("open");
            checkInnerWidth();
            isMenuOpen = true;
          } else {
            navbarMenu.classList.remove("open");
            navbarMenu.classList.add("closed");
            checkInnerWidth();
            isMenuOpen = false;
          }
        }, CLICK_DELAY);
      });

      {/* Close menu on click outside */}
      document.addEventListener('click', (event) => {
        if (isMenuOpen === true && !navbarMenu.contains(event.target as Node) && 
        !navbarMenuButton.contains(event.target as Node)) {
          navbarMenu.classList.add("closed");
          isMenuOpen = false;
        }
      });

      const SWIPE_THRESHOLD = 50;
      let touchStartX = 0;
      let touchStartY = 0;

      document.addEventListener("touchstart", (event) => {
        if (isMenuOpen === false) return;
        const touch = event.touches[0];
        touchStartX = touch.clientX;
        touchStartY = touch.clientY;
      });

      document.addEventListener("touchmove", (event) => {
        if (isMenuOpen === false) return;
        const touch = event.touches[0];
        const deltaX = touch.clientX - touchStartX;
        const deltaY = touch.clientY - touchStartY;

        if (Math.abs(deltaX) > SWIPE_THRESHOLD || Math.abs(deltaY) > SWIPE_THRESHOLD) {
          navbarMenu.classList.remove("open");
          navbarMenu.classList.add("closed");
          isMenuOpen = false;
        }
      });
    }
  });
</script>
